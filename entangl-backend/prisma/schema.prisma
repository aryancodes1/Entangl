generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  avatar      String?
  phone       String?
  password    String?
  verified    Boolean  @default(false)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follow[] @relation("UserFollowers")
  following   Follow[] @relation("UserFollowing")

  @@map("users")
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String?  // Allow null content for image-only posts
  imageUrl   String?  // Allow null for text-only posts
  videoUrl   String?  // Allow null for non-video posts
  authorId   String    @db.ObjectId
  isPublic   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  prediction String?   // e.g., "real", "fake", "uncertain"
  confidence Float?    // e.g., 0.95
  factCheckDetails String? // JSON string for storing detailed fact-check results

  // Relations
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes      Like[]
  comments    Comment[]
  hashtags   Hashtag[] @relation(fields: [hashtagIds], references: [id])
  hashtagIds String[] @db.ObjectId

  @@map("posts")
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Hashtag {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  posts Post[] @relation(fields: [postIds], references: [id])
  postIds String[] @db.ObjectId

  @@map("hashtags")
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  status      String   @default("pending") // "pending", "accepted"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
